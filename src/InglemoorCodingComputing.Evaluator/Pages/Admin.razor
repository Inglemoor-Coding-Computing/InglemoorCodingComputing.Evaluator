@page "/admin"
@layout AdminLayout
@inject AuthenticationStateService AuthenticationStateService
@inject AdminService AdminService
@inject IJSRuntime JSRuntime
<PageTitle>Admin</PageTitle>

@if (authed)
{
    <div class="flex flex-col items-center">
        <h3 class="text-3xl font-semibold">API Users</h3>
        <button class="italic hover:underline" @onclick=Load>refresh</button>
        <div class="space-y-2">
            @foreach (var user in users)
            {
                <div class="p-2 bg-gray-100 dark:bg-gray-800 rounded-xl w-96">
                    <div>@user.Name</div>
                    <div class="font-mono">@user.Id</div>
                    <div class="font-mono">@user.Creation</div>
                    <div class="flex justify-around py-1 space-x-4">
                        <button @onclick="() => CopyKeyAsync(user)"
                    class="w-32 px-2 py-1 text-sm font-semibold transition-colors border-2 rounded-2xl border-amber-500 hover:bg-amber-500">
                            @(recentCopied == user.Id ? "Copied" : "Copy API Key")
                        </button>
                        <button @onclick="() => DeleteAsync(user)"
                    class="px-2 py-1 text-sm font-semibold transition-colors border-2 rounded-2xl border-rose-500 hover:bg-rose-500">
                            Delete
                        </button>
                    </div>
                </div>
            }

            <form @onsubmit=CreateAsync class="flex flex-col items-center p-2 bg-gray-50 dark:bg-gray-900 rounded-xl w-96">
                <div class="flex">
                    <label for="name">Name:</label>
                    <input id="name" @bind=newName
                    class="block w-full px-2 py-1 mx-4 bg-gray-100 focus:outline-none sm:text-sm rounded-xl focus:ring-indigo-500 dark:bg-gray-800 dark:placeholder-gray-400 dark:text-white" />
                </div>
                <button type="submit" class="px-2 mt-2 font-semibold bg-teal-500 rounded-lg">Create</button>
            </form>
        </div>
        <ExecutionHistory />
    </div>
}
else
{
    @* Login *@
    <div class="flex flex-col items-center space-y-2">
        <h3 class="text-xl">Login</h3>
        <div class="flex space-x-1">
            <label for="password">Password:</label>
            <input id="password" @bind=password type="password"
            class="block w-full px-2 py-1 bg-gray-100 focus:outline-none sm:text-sm rounded-xl focus:ring-indigo-500 dark:bg-gray-800 dark:placeholder-gray-400 dark:text-white" />
        </div>
        <button class="px-3 py-1 text-white bg-indigo-400 rounded-xl" @onclick=Authenticate>Login</button>
        <div class="text-rose-500">
            @error
        </div>
    </div>
}

@code {
    private List<ApiUser> users = new();
    private bool authed;
    private string password = string.Empty;
    private string? error;
    private Guid? recentCopied;
    private async Task CopyKeyAsync(ApiUser user)
    {
        var token = await AdminService.GenerateApiTokenAsync(user.Id);
        if (token is not null)
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", token.Token);
            recentCopied = user.Id;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(2000);
            recentCopied = null;
        }
    }

    private async Task DeleteAsync(ApiUser user)
    {
        var expected = user.Name;
        if (!(await JSRuntime.InvokeAsync<string>("prompt", $"Enter \"{expected}\" to delete.") == expected))
            return;
        await AdminService.DeleteUserAsync(user.Id);
        Load();
    }

    private void Load()
    {
        users.Clear();
        users.AddRange(AdminService.GetUsers());
    }

    private async Task CreateAsync()
    {
        if (string.IsNullOrWhiteSpace(newName))
            return;
        await AdminService.CreateUserAsync(new(newName));
        Load();
    }

    private string newName = string.Empty;

    private void Authenticate()
    {
        error = null;
        if (!AuthenticationStateService.Authenticate(password))
            error = "Failed to authenticate";
        else
            Load();
        password = string.Empty;
        CheckAuthentication();
    }

    private void CheckAuthentication()
    {
        authed = AuthenticationStateService.Authenticated;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CheckAuthentication();
            using PeriodicTimer timer = new(TimeSpan.FromSeconds(10));
            while (await timer.WaitForNextTickAsync())
                await InvokeAsync(CheckAuthentication);
        }
    }
}
